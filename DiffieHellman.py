import hashlib
from binascii import hexlify
from os import urandom

class DiffieHellman():
	def __init__(self, generator, prime_group, key_length):
		"""
		Generate public and private keys
		"""

		# Minimum key length
		minimum_key_length = 180

		# Default key length
		default_key_length = 540

		# Default generator
		default_generator = 2

		# Possible generators
		generator_options = [ 2, 3, 5, 7 ]

		# Check for invalid generator
		if generator not in generator_options:

			# Print error message
			print("Error: invalid generator; using default.")

			# Set generator to default
			self.generator = default_generator

		# Valid generator
		else:

			# Set generator to parameter
			self.generator = generator

		# Check for an invalid key length
		if key_length < minimum_key_length:

			# Print error message
			print("Error: insufficient key length; using default.")

			# Set key length to default
			self.key_length = default_key_length

		# Valid key length
		else:

			# Set key length to parameter
			self.key_length = key_length

		# Set prime number
		self.prime = self.getprime(prime_group)

		# Generate private key
		self.private_key = self.genprivatekey(key_length)

		# Generate public key
		self.public_key = self.genpublickey()

	def getprime(self, prime_group):
		"""
		Given a prime group number, return a prime number.
		"""

		# Default prime group
		default_prime_group = 17

		# Possible prime numbers (MODP Diffie Hellman Groups, Internet Society)
		primes = {
			5:  0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF,
			14: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF,
			15: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF,
			16: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF,
			17: 0x
			18: 0x
		}

		# Check if invalid prime group 
		if prime_group not in primes.keys():
			
			# Print error message
			print("Error: no prime group %i; using default." % prime_group)
			
			# Extract prime number using default prime group
			return primes[default_prime_group]

		# Valid prime group
		else:
			
			# Extract prime number using parameter
			return primes[prime_group]

	def genrandom(self, num_bits):
		"""
		Generate a random number with length of given number of bits.
		"""

		# Random number to be generated
		random_number = 0

		# Number of bytes to generate
		bytes = num_bits // 8 + 8

		# While random number has not reached necessary length
		while random_number.bit_length() < num_bits:

			# Generate a random number of bytes in big-endian format
			random_number = int.from_bytes(urandom(bytes), byteorder='big')

		# Return result
		return random_number

	def genprivatekey(self, num_bits):
		"""
		Generate a private key using a random number generator.
		"""

		return self.genrandom(num_bits)

	def genpublickey(self):
		"""
		Generate a public key (generator ^ private_key) % prime.
		"""

		return pow(self.generator, self.private_key, self.prime)

	def verpublickey(self, other_key):
		"""
		Checks that other party's public key is valid.
		"""

		# Public key must be between 2 and our prime number
		if other_key > 2 and other_key < self.prime - 1:

			# Check Legendre Symbol equal to 1
			if pow(other_key, (self.prime - 1) // 2, self.prime) == 1:

				# Key passed verification
				return True
	
		# Key failed verification
		return False

	def gensecret(self, private_key, other_key):
		"""
		Combine private key  with other party's public key to generate a shared
		secret.
		"""

		# Verify other party's public key
		if self.verpublickey(other_key):

			# Return (other_key ^ private_key) % prime
			return pow(other_key, private_key, self.prime)

		# Other party's public key failed verification	
		else:

			# Raise exception
			raise Exception("Other party's public key is invalid.")

	def genkey(self, other_key):
		"""
		Generate shared secret key.
		"""

		# Shared secret
		self.secret = self.gensecret(self.private_key, other_key)

		try:

			# Convert shared secret (integer) to bytes for hash function
			secret_bytes = self.secret.to_bytes(self.secret.bit_length() // 8 + 1, byteorder = 'big')

		# Unable to convert to bytes	
		except AttributeError:

			# Make it a string
			secret_bytes = str(self.secret)

		# Hash using SHA-512
		hash = hashlib.sha512()

		# Hash shared secret bytes
		hash.update(bytes(secret_bytes))

		# Shared secret hashed to produce shared secret key
		self.secret_key = hash.digest()

	def getkey(self):
		"""
		Return shared secret key.
		"""

		return self.secret_key

	def showparameters(self):
		"""
		Print parameters of Diffie-Hellman exchange.
		"""
		print("Parameters:")
		print("Prime[{0}]: {1}".format(self.prime.bit_length(), self.prime))
		print("Generator[{0}]: {1}\n".format(self.generator.bit_length(), self.generator))
		print("Private Key[{0}]: {1}\n".format(self.private_key.bit_length(), self.private_key))
		print("Public Key[{0}]: {1}".format(self.public_key.bit_length(), self.public_key))

	def showresults(self):
		"""
		Print results of Diffie-Hellman exchange.
		"""
		print("Results:")
		print("Shared Secret[{0}]: {1}".format(self.secret.bit_length(), self.secret))
		print("Shared Key[{0}]: {1}".format(len(self.secret_key), hexlify(self.secret_key)))

if __name__ == "__main__":

	# Parameters for key exchange (would need to be exchanged)
	pub_gen = 5
	pub_grp = 18
	key_len = 256

	# Generating public/private keys using negotiated parameters
	alice = DiffieHellman(pub_gen, pub_grp, key_len)
	bob = DiffieHellman(pub_gen, pub_grp, key_len)

	# This is where public keys would be exchanged betwee parties

	# Generating shared secret key
	alice.genkey(bob.public_key)
	bob.genkey(alice.public_key)

	# alice.showparameters()
	# alice.showresults()
	# bob.showparameters()
	# bob.showresults()

	# Keys match
	if alice.getkey() == bob.getkey():

		# Print success message
		print("Shared secret keys match.")

		# Print key
		print("Key:", hexlify(alice.secret_key))

	# Keys don't match
	else:

		# Print failure message
		print("Shared secret keys do not match.")

		# Print each party's secret
		print("Alice's Secret:", alice.secret)
		print("Bob's Secret:", bob.secret)
